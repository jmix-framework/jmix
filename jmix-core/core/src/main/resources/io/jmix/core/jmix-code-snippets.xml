<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2022 Haulmont.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<jmixCodeSnippets xmlns="http://jmix.io/schema/core/code-snippets">

    <category name="Data">
        <codeSnippet name="Create entity" contextTypes="service,controller" expressionResultType="${entityClass}">
            <inject variable="dataManager" classQualifiedName="io.jmix.core.DataManager"/>

            <classInputParameter code="entityClass" text="Entity class" jmixEntity="true"/>

            <text language="java">
                dataManager.create(${entityClass}.class);
            </text>
            <text language="kotlin">
                dataManager.create(${entityClass}::class.java)
            </text>

            <description>
                <![CDATA[
                Create an entity instance in memory using <code>DataManager</code>.<br>
                <a href="https://docs.jmix.io/jmix/data-model/entities.html#instantiation">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

        <codeSnippet name="Create fetch plan" contextTypes="service,controller">
            <inject variable="fetchPlans" classQualifiedName="io.jmix.core.FetchPlans"/>

            <classInputParameter code="entityClass" text="Entity class" jmixEntity="true"/>

            <text language="java">
                ${IS_FINAL}io.jmix.core.FetchPlan fetchPlan = fetchPlans.builder(${entityClass}.class)
                .addFetchPlan(io.jmix.core.FetchPlan.BASE)
                .add("someReferenceProperty", io.jmix.core.FetchPlan.BASE)
                .build();
            </text>
            <text language="kotlin">
                val fetchPlan = fetchPlans.builder(${entityClass}::class.java)
                .addFetchPlan(io.jmix.core.FetchPlan.BASE)
                .add("someReferenceProperty", io.jmix.core.FetchPlan.BASE)
                .build()
            </text>

            <description>
                <![CDATA[
                Create a fetch plan programmatically using builder.<br>
                <a href="https://docs.jmix.io/jmix/data-access/fetching.html#fetch-plan">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

        <codeSnippet name="Get entity state" contextTypes="service,controller" expressionResultType="boolean">
            <inject variable="entityStates" classQualifiedName="io.jmix.core.EntityStates"/>

            <variableInputParameter code="entity" text="Entity" jmixEntity="true"/>
            <optionsInputParameter code="state" text="State">
                <option value="New" name="New"/>
                <option value="Detached" name="Detached"/>
                <option value="Managed" name="Managed"/>
            </optionsInputParameter>

            <text language="java">
                entityStates.is${state}(${entity});
            </text>
            <text language="kotlin">
                entityStates.is${state}(${entity})
            </text>

            <description>
                Check if an entity instance is New, Detached or Managed.
            </description>
        </codeSnippet>

        <codeSnippet name="Save entity" contextTypes="service,controller" expressionResultType="var">
            <inject variable="dataManager" classQualifiedName="io.jmix.core.DataManager"/>

            <variableInputParameter code="entity" text="Entity" optional="true" jmixEntity="true"/>

            <text language="java">
                dataManager.save(${entity});
            </text>
            <text language="kotlin">
                dataManager.save(${entity})
            </text>

            <description>
                <![CDATA[
                Save an entity instance to the database using <code>DataManager</code>.<br>
                <a href="https://docs.jmix.io/jmix/data-access/data-manager.html#save">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

        <codeSnippet name="Save list of entities" contextTypes="service,controller"
                     expressionResultType="io.jmix.core.EntitySet">
            <inject variable="dataManager" classQualifiedName="io.jmix.core.DataManager"/>

            <text language="java">
                dataManager.save(new io.jmix.core.SaveContext().saving(entities));
            </text>
            <text language="kotlin">
                dataManager.save(io.jmix.core.SaveContext().saving(entities))
            </text>

            <description>
                <![CDATA[
                Save a collection of entities to the database using <code>DataManager</code>.<br>
                <a href="https://docs.jmix.io/jmix/data-access/data-manager.html#save">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

        <codeSnippet name="Load one entity by id" contextTypes="service,controller" expressionResultType="${entityClass}">
            <inject variable="dataManager" classQualifiedName="io.jmix.core.DataManager"/>

            <classInputParameter code="entityClass" text="Entity class" jmixEntity="true"/>

            <text language="java">
                dataManager.load(${entityClass}.class).id(id).one();
            </text>
            <text language="kotlin">
                dataManager.load(${entityClass}::class.java).id(id).one()
            </text>

            <description>
                <![CDATA[
                Load an entity instance from the database by identifier using <code>DataManager</code>. If no entity found, an exception is thrown.<br>
                <a href="https://docs.jmix.io/jmix/data-access/data-manager.html#load-by-id">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

        <codeSnippet name="Load optional entity by id" contextTypes="service,controller" expressionResultType="java.util.Optional&lt;${entityClass}&gt;">
            <inject variable="dataManager" classQualifiedName="io.jmix.core.DataManager"/>

            <classInputParameter code="entityClass" text="Entity class" jmixEntity="true"/>

            <text language="java">
                dataManager.load(${entityClass}.class).id(id).optional();
            </text>
            <text language="kotlin">
                dataManager.load(${entityClass}::class.java).id(id).optional()
            </text>

            <description>
                <![CDATA[
                Load an entity instance from the database by identifier using <code>DataManager</code>. The returned entity is wrapped in <code>Optional</code>.<br>
                <a href="https://docs.jmix.io/jmix/data-access/data-manager.html#load-by-id">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

    </category>

    <category name="Authentication">

        <codeSnippet name="Get current user" contextTypes="service,controller" expressionResultType="${userClass}">
            <inject variable="currentAuthentication" classQualifiedName="io.jmix.core.security.CurrentAuthentication"/>

            <text language="java">
                (${userClass}) currentAuthentication.getUser();
            </text>
            <text language="kotlin">
                currentAuthentication.user as ${userClass}
            </text>

            <description>
                <![CDATA[
                Get the currently authenticated user.<br>
                <a href="https://docs.jmix.io/jmix/security/authentication.html#current">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

        <codeSnippet name="Get effective user" contextTypes="service,controller" expressionResultType="${userClass}">
            <inject variable="currentUserSubstitution"
                    classQualifiedName="io.jmix.core.usersubstitution.CurrentUserSubstitution"/>

            <text language="java">
                (${userClass}) currentUserSubstitution.getEffectiveUser();
            </text>
            <text language="kotlin">
                currentUserSubstitution.effectiveUser as ${userClass}
            </text>

            <description>
                <![CDATA[
                Get the currently authenticated or substituted user.<br>
                <a href="https://docs.jmix.io/jmix/security/users.html#user-substitution">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

        <codeSnippet name="Get session attribute" contextTypes="service" expressionResultType="Object">
            <inject variable="sessionDataProvider" classQualifiedName="org.springframework.beans.factory.ObjectProvider&lt;io.jmix.core.session.SessionData&gt;"/>

            <stringInputParameter code="attrName" text="Attribute Name"/>

            <text language="java">
                sessionDataProvider.getObject().getAttribute("${attrName}");
            </text>
            <text language="kotlin">
                sessionDataProvider.getObject().getAttribute("${attrName}")
            </text>

            <description>
                <![CDATA[
                Get value of a current session attribute.<br>
                <a href="https://docs.jmix.io/jmix/security/authentication.html#session-attributes">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>


        <codeSnippet name="Get session attribute" contextTypes="controller" expressionResultType="Object">
            <inject variable="sessionData" classQualifiedName="io.jmix.core.session.SessionData"/>

            <stringInputParameter code="attrName" text="Attribute Name"/>

            <text language="java">
                sessionData.getAttribute("${attrName}");
            </text>
            <text language="kotlin">
                sessionData.getAttribute("${attrName}")
            </text>

            <description>
                <![CDATA[
                Get value of a current session attribute.<br>
                <a href="https://docs.jmix.io/jmix/security/authentication.html#session-attributes">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

        <codeSnippet name="Set session attribute" contextTypes="service">
            <inject variable="sessionDataProvider" classQualifiedName="org.springframework.beans.factory.ObjectProvider&lt;io.jmix.core.session.SessionData&gt;"/>

            <stringInputParameter code="attrName" text="Attribute Name"/>

            <text language="java">
                sessionDataProvider.getObject().setAttribute("${attrName}", attributeValue);
            </text>
            <text language="kotlin">
                sessionDataProvider.getObject().setAttribute("${attrName}", attributeValue)
            </text>

            <description>
                <![CDATA[
                Set value of a current session attribute.<br>
                <a href="https://docs.jmix.io/jmix/security/authentication.html#session-attributes">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

        <codeSnippet name="Set session attribute" contextTypes="controller">
            <inject variable="sessionData" classQualifiedName="io.jmix.core.session.SessionData"/>

            <stringInputParameter code="attrName" text="Attribute Name"/>

            <text language="java">
                sessionData.setAttribute("${attrName}", attributeValue);
            </text>
            <text language="kotlin">
                sessionData.setAttribute("${attrName}", attributeValue)
            </text>

            <description>
                <![CDATA[
                Set value of a current session attribute.<br>
                <a href="https://docs.jmix.io/jmix/security/authentication.html#session-attributes">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

        <codeSnippet name="Get current user locale" contextTypes="service,controller" expressionResultType="java.util.Locale">
            <inject variable="currentAuthentication" classQualifiedName="io.jmix.core.security.CurrentAuthentication"/>

            <text language="java">
                currentAuthentication.getLocale();
            </text>
            <text language="kotlin">
                currentAuthentication.locale
            </text>

            <description>
                <![CDATA[
                Get locale of the currently authenticated user.<br>
                <a href="https://docs.jmix.io/jmix/security/authentication.html#current">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>
    </category>

    <category name="Date and time">
        <codeSnippet name="Get current date and time" contextTypes="service,controller"
                     expressionResultType="java.time.ZonedDateTime">
            <inject variable="timeSource" classQualifiedName="io.jmix.core.TimeSource"/>

            <text language="java">
                timeSource.now();
            </text>
            <text language="kotlin">
                timeSource.now()
            </text>

            <description>
                <![CDATA[
                Get the current date and time using <code>TimeSource</code> bean.<br>
                ]]>
            </description>
        </codeSnippet>

        <codeSnippet name="Get relative date and time" contextTypes="service,controller"
                     expressionResultType="java.time.ZonedDateTime">
            <inject variable="timeSource" classQualifiedName="io.jmix.core.TimeSource"/>

            <optionsInputParameter code="timeUnit" text="Time Unit">
                <option value="Seconds" name="Seconds"/>
                <option value="Minutes" name="Minutes"/>
                <option value="Hours" name="Hours"/>
                <option value="Days" name="Days"/>
                <option value="Weeks" name="Weeks"/>
                <option value="Months" name="Months"/>
                <option value="Years" name="Years"/>
            </optionsInputParameter>
            <integerInputParameter code="amount" text="Amount"/>

            <text language="java">
                timeSource.now().&lt;% if (amount[0] == '-') print 'minus' else print 'plus' %&gt;${timeUnit}(&lt;% if (amount[0] == '-') print amount.substring(1) else print amount %&gt;);
            </text>
            <text language="kotlin">
                timeSource.now().&lt;% if (amount[0] == '-') print 'minus' else print 'plus' %&gt;${timeUnit}(&lt;% if (amount[0] == '-') print amount.substring(1) else print amount %&gt;)
            </text>

            <description>
                <![CDATA[
                Get date and time relative to now using <code>TimeSource</code> bean.<br>
                ]]>
            </description>
        </codeSnippet>
    </category>

    <category name="Localization">
        <codeSnippet name="Get localized message" contextTypes="service" expressionResultType="String">
            <inject variable="messages" classQualifiedName="io.jmix.core.Messages"/>

            <messageKeyInputParameter code="key" text="Message key" optional="true"/>

            <text language="java">
                messages.getMessage(getClass(), "${key}");
            </text>
            <text language="kotlin">
                messages.getMessage(javaClass, "${key}")
            </text>

            <description>
                <![CDATA[
                Get a localized message from the message bundle by key.<br>
                <a href="https://docs.jmix.io/jmix/localization/message-bundles.html#using-messages-in-java">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

        <codeSnippet name="Get localized message" contextTypes="controller" expressionResultType="String">
            <inject variable="messageBundle" classQualifiedName="io.jmix.ui.screen.MessageBundle"/>

            <messageKeyInputParameter code="key" text="Message key" optional="true"/>

            <text language="java">
                messageBundle.getMessage("${key}");
            </text>
            <text language="kotlin">
                messageBundle.getMessage("${key}")
            </text>

            <description>
                <![CDATA[
                Get a localized message from the message bundle by key.<br>
                <a href="https://docs.jmix.io/jmix/localization/message-bundles.html#using-messages-in-ui">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>
    </category>

    <category name="Files">
        <codeSnippet name="Save to file storage" contextTypes="service,controller">
            <inject variable="fileStorageLocator" classQualifiedName="io.jmix.core.FileStorageLocator"/>

            <text language="java">
                ${IS_FINAL}java.io.InputStream inputStream;
                ${IS_FINAL}io.jmix.core.FileStorage fileStorage = fileStorageLocator.getDefault();
                ${IS_FINAL}io.jmix.core.FileRef fileRef = fileStorage.saveStream("fileName.txt", inputStream);
            </text>
            <text language="kotlin">
                val inputStream: java.io.InputStream
                val fileStorage = fileStorageLocator.getDefault&lt;io.jmix.core.FileStorage&gt;()
                val fileRef = fileStorage.saveStream("fileName.txt", inputStream)
            </text>

            <description>
                <![CDATA[
                Save a file to the file storage.<br>
                <a href="https://docs.jmix.io/jmix/files/file-storage.html#file-storage-example">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

        <codeSnippet name="Load from file storage" contextTypes="service,controller">
            <inject variable="fileStorageLocator" classQualifiedName="io.jmix.core.FileStorageLocator"/>

            <text language="java">
                ${IS_FINAL}io.jmix.core.FileRef fileRef;
                ${IS_FINAL}io.jmix.core.FileStorage fileStorage = fileStorageLocator.getDefault();
                try (${IS_FINAL}java.io.InputStream inputStream = fileStorage.openStream(fileRef)) {
                // use the stream
                }
            </text>
            <text language="kotlin">
                val fileRef: io.jmix.core.FileRef
                val fileStorage = fileStorageLocator.getDefault&lt;io.jmix.core.FileStorage&gt;()
                fileStorage.openStream(fileRef).use {
                // use the stream
                }
            </text>

            <description>
                <![CDATA[
                Load a file from the file storage.<br>
                <a href="https://docs.jmix.io/jmix/files/file-storage.html#file-storage-example">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>
    </category>

    <category name="Events">

        <codeSnippet name="Publish application event" contextTypes="service,controller">
            <inject variable="applicationEventPublisher"
                    classQualifiedName="org.springframework.context.ApplicationEventPublisher"/>

            <classInputParameter code="eventClass" text="Event Class"
                                 superClass="org.springframework.context.ApplicationEvent" includeLibraries="true"/>

            <text language="java">
                ${IS_FINAL}${eventClass} event = new ${eventClass}();
                applicationEventPublisher.publishEvent(event);
            </text>
            <text language="kotlin">
                val event = ${eventClass}()
                applicationEventPublisher.publishEvent(event)
            </text>

            <description>
                <![CDATA[
                Send a custom application event.<br>
                <a href="https://www.baeldung.com/spring-events">Article</a>
                ]]>
            </description>
        </codeSnippet>

    </category>

    <category name="Logging">

        <codeSnippet name="Log a message" contextTypes="service,controller">
            <staticInsertion type="org.slf4j.Logger" variable="log">
                <expression language="java">
                    org.slf4j.LoggerFactory.getLogger(${currentClass}.class)
                </expression>
                <expression language="kotlin">
                    org.slf4j.LoggerFactory.getLogger(${currentClass}::class.java)
                </expression>
            </staticInsertion>

            <optionsInputParameter code="level" text="Level">
                <option value="trace" name="TRACE"/>
                <option value="debug" name="DEBUG"/>
                <option value="info" name="INFO"/>
                <option value="warn" name="WARN"/>
                <option value="error" name="ERROR"/>
            </optionsInputParameter>

            <stringInputParameter code="message" text="Message"/>

            <text language="java">
                log.${level}("${message}");
            </text>
            <text language="kotlin">
                log.${level}("${message}")
            </text>

            <description>
                <![CDATA[
                Output a message to the log using SLF4J.<br>
                <a href="http://www.slf4j.org/manual.html">SLF4J Manual</a>
                ]]>
            </description>
        </codeSnippet>

    </category>


    <category name="Web">
        <codeSnippet name="Open web page" contextTypes="service">
            <inject variable="webBrowserToolsProvider" classQualifiedName="org.springframework.beans.factory.ObjectProvider&lt;io.jmix.ui.WebBrowserTools&gt;"/>

            <text language="java">
                webBrowserToolsProvider.getObject().showWebPage("https://jmix.io", io.jmix.core.common.util.ParamsMap.of("target", "_blank"));
            </text>
            <text language="kotlin">
                webBrowserToolsProvider.getObject().showWebPage("https://jmix.io", mapOf("target" to "_blank"))
            </text>

            <description>
                Open a web page in a browser tab
            </description>
        </codeSnippet>


        <codeSnippet name="Open web page" contextTypes="controller">
            <inject variable="webBrowserTools" classQualifiedName="io.jmix.ui.WebBrowserTools"/>

            <text language="java">
                webBrowserTools.showWebPage("https://jmix.io", io.jmix.core.common.util.ParamsMap.of("target", "_blank"));
            </text>
            <text language="kotlin">
                webBrowserTools.showWebPage("https://jmix.io", mapOf("target" to "_blank"))
            </text>

            <description>
                Open a web page in a browser tab
            </description>
        </codeSnippet>

        <codeSnippet name="Call GET web service" contextTypes="service,controller" minJavaVersion="11">
            <urlInputParameter code="url" text="URL"/>
            <classInputParameter code="returnType" text="Return type" optional="true"/>

            <text language="java">
                ${IS_FINAL}java.net.http.HttpClient client = HttpClient.newHttpClient();
                ${IS_FINAL}java.net.http.HttpRequest request = HttpRequest.newBuilder()
                .uri(java.net.URI.create(${url}))
                .build();
                try {
                ${IS_FINAL}&lt;% if (returnType == null) print 'java.net.http.HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());' else print 'java.net.http.HttpResponse&lt;java.io.InputStream&gt; response = client.send(request, HttpResponse.BodyHandlers.ofInputStream());' %&gt;
                if (response.statusCode() == org.springframework.http.HttpStatus.OK.value()) {
                ${IS_FINAL}&lt;% if (returnType == null) print 'String responseBody = response.body();' else print returnType + ' responseElement = new com.fasterxml.jackson.databind.ObjectMapper().readValue(response.body(), ' + returnType + '.class);' %&gt;
                } else {
                // process incorrect response
                }
                } catch (${IS_FINAL}java.io.IOException e) {
                // process error
                } catch (${IS_FINAL}InterruptedException e) {
                // process error
                }
            </text>
            <text language="kotlin">
                val client = java.net.http.HttpClient.newHttpClient()
                val request = java.net.http.HttpRequest.newBuilder()
                .uri(java.net.URI.create(${url}))
                .build()
                try {
                &lt;% if (returnType == null) print 'val response = client.send(request, java.net.http.HttpResponse.BodyHandlers.ofString())' else print 'val response = client.send(request, java.net.http.HttpResponse.BodyHandlers.ofInputStream())' %&gt;
                if (response.statusCode() == org.springframework.http.HttpStatus.OK.value()) {
                &lt;% if (returnType == null) print 'val responseBody = response.body()' else print 'val responseElement = com.fasterxml.jackson.databind.ObjectMapper().readValue(response.body(), ' + returnType + '::class.java);' %&gt;
                } else {
                // process incorrect response
                }
                } catch (e: java.io.IOException) {
                // process error
                } catch (e: InterruptedException) {
                // process error
                }
            </text>

            <description>
                Call a web service using HTTP GET and map the result to an object.
            </description>
        </codeSnippet>

        <codeSnippet name="Call POST web service" contextTypes="service,controller" minJavaVersion="11">
            <urlInputParameter code="url" text="URL"/>
            <variableInputParameter code="requestBodyObject" text="Request Body Object" optional="true"/>

            <text language="java">
                ${IS_FINAL}String requestBody = new com.fasterxml.jackson.databind.ObjectMapper().writeValueAsString(&lt;% if (requestBodyObject != '') print requestBodyObject else print 'requestBodyObject' %&gt;);
                ${IS_FINAL}java.net.http.HttpClient client = HttpClient.newHttpClient();
                ${IS_FINAL}java.net.http.HttpRequest request = HttpRequest.newBuilder()
                .uri(java.net.URI.create(${url}))
                .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                .build();
                try {
                ${IS_FINAL}java.net.http.HttpResponse&lt;String&gt; response = client.send(request, java.net.http.HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == org.springframework.http.HttpStatus.OK.value()) {
                ${IS_FINAL}String responseBody = response.body();
                } else {
                // process incorrect response
                }
                } catch (${IS_FINAL}java.io.IOException e) {
                // process error
                } catch (${IS_FINAL}InterruptedException e) {
                // process error
                }
            </text>
            <text language="kotlin">
                val requestBody = com.fasterxml.jackson.databind.ObjectMapper().writeValueAsString(&lt;% if (requestBodyObject != '') print requestBodyObject else print 'requestBodyObject' %&gt;)
                val client = java.net.http.HttpClient.newHttpClient()
                val request = java.net.http.HttpRequest.newBuilder()
                .uri(java.net.URI.create(${url}))
                .POST(java.net.http.HttpRequest.BodyPublishers.ofString(requestBody))
                .build()
                try {
                val response = client.send(request, java.net.http.HttpResponse.BodyHandlers.ofString())
                if (response.statusCode() == org.springframework.http.HttpStatus.OK.value()) {
                val responseBody = response.body()
                } else {
                // process incorrect response
                }
                } catch (e: java.io.IOException) {
                // process error
                } catch (e: InterruptedException) {
                // process error
                }
            </text>

            <description>
                Call a web service using HTTP POST and map the result to an object.
            </description>
        </codeSnippet>

    </category>

</jmixCodeSnippets>
