<!--
  ~ Copyright 2022 Haulmont.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<jmixCodeSnippets xmlns="http://jmix.io/schema/core/code-snippets">

    <category name="Email">

        <codeSnippet name="Send email" contextTypes="service,controller">
            <inject variable="emailer" classQualifiedName="io.jmix.email.Emailer"/>

            <optionsInputParameter code="contentType" text="Content type">
                <option name="Plain text" value="text/plain; charset=UTF-8"/>
                <option name="HTML" value="text/html; charset=UTF-8"/>
            </optionsInputParameter>

            <text language="java">
                ${IS_FINAL}io.jmix.email.EmailInfo emailInfo = io.jmix.email.EmailInfoBuilder.create("test@email.com", "email subject", "email body")
                    .setBodyContentType("${contentType}")
                    .setImportant(false)
                    .build();
                try {
                    emailer.sendEmail(emailInfo);
                } catch (${IS_FINAL}io.jmix.email.EmailException e) {
                    throw new RuntimeException("Error sending email to " +
                            e.getFailedAddresses() + " due to " + e.getMessages());
                }
            </text>

            <text language="kotlin">
                val emailInfo = io.jmix.email.EmailInfoBuilder.create("test@email.com", "email subject", "email body")
                    .setBodyContentType("${contentType}")
                    .setImportant(false)
                    .build()
                try {
                    emailer.sendEmail(emailInfo)
                } catch (e: io.jmix.email.EmailException) {
                    throw RuntimeException("Error sending email to " +
                            e.failedAddresses + " due to " + e.messages)
                }
            </text>

            <description>
                <![CDATA[
                    Send an email in the current thread.<br>
                    <a href="https://docs.jmix.io/jmix/email/api.html">Jmix Documentation</a>
                ]]>
            </description>

        </codeSnippet>

        <codeSnippet name="Send email asynchronously" contextTypes="service,controller">
            <inject variable="emailer" classQualifiedName="io.jmix.email.Emailer"/>

            <optionsInputParameter code="contentType" text="Content type">
                <option name="Plain text" value="text/plain; charset=UTF-8"/>
                <option name="HTML" value="text/html; charset=UTF-8"/>
            </optionsInputParameter>

            <text language="java">
                ${IS_FINAL}io.jmix.email.EmailInfo emailInfo = io.jmix.email.EmailInfoBuilder.create("test@email.com", "email subject", "email body")
                    .setBodyContentType("${contentType}")
                    .setImportant(false)
                    .build();
                emailer.sendEmailAsync(emailInfo);
            </text>

            <text language="kotlin">
                val emailInfo = io.jmix.email.EmailInfoBuilder.create("test@email.com", "email subject", "email body")
                    .setBodyContentType("${contentType}")
                    .setImportant(false)
                    .build()
                emailer.sendEmailAsync(emailInfo)
            </text>

            <description>
                <![CDATA[
                    Create and enqueue an email to be sent by a background process.<br>
                    <a href="https://docs.jmix.io/jmix/email/api.html">Jmix Documentation</a>
                ]]>
            </description>

        </codeSnippet>

        <codeSnippet name="Create attachment from FileRef" contextTypes="service,controller">
            <inject variable="fileStorage" classQualifiedName="io.jmix.core.FileStorage"/>

            <variableInputParameter code="fileRef" text="FileRef variable"/>

            <text language="java">
                ${IS_FINAL}io.jmix.email.EmailAttachment emailAtt;
                try (${IS_FINAL}java.io.InputStream inputStream = fileStorage.openStream(${fileRef})) {
                    emailAtt = new EmailAttachment(org.apache.commons.io.IOUtils.toByteArray(inputStream), "file name", "someId");
                    // use EmailInfo.addAttachment() to send an email with the attachment
                } catch (${IS_FINAL}java.io.IOException e) {
                    throw new RuntimeException("Error reading file", e);
                }
            </text>

            <text language="kotlin">
                // use EmailInfo.addAttachment() to send an email with the attachment
                val emailAtt = fileStorage.openStream(fileRef).use {
                    return@use io.jmix.email.EmailAttachment(it.readAllBytes(), "file name", "someId")
                }
            </text>

            <description>
                <![CDATA[
                    Create an email attachment from an existing <code>FileRef</code> variable using <code>FileStorage</code> and <code>EmailAttachment</code>.<br>
                    <a href="https://docs.jmix.io/jmix/email/api.html#email-attachments">Jmix Documentation</a>
                ]]>
            </description>

        </codeSnippet>

        <codeSnippet name="Create attachment from resource" contextTypes="service,controller">
            <inject variable="resources" classQualifiedName="io.jmix.core.Resources"/>

            <text language="java">
                ${IS_FINAL}io.jmix.email.EmailAttachment emailAtt;
                try (${IS_FINAL}java.io.InputStream inputStream = resources.getResourceAsStream("/com/company/demo/resource.ext")) {
                    if (inputStream == null)
                        throw new RuntimeException("Resource doesn't exist");
                    emailAtt = new EmailAttachment(org.apache.commons.io.IOUtils.toByteArray(inputStream), "file name", "someId");
                    // use EmailInfo.addAttachment() to send an email with the attachment
                } catch (${IS_FINAL}java.io.IOException e) {
                    throw new RuntimeException("Error reading resource", e);
                }
            </text>

            <text language="kotlin">
                // use EmailInfo.addAttachment() to send an email with the attachment
                val inputStream = resources.getResourceAsStream("/com/company/demo/resource.ext")
                        ?: throw RuntimeException("Resource doesn't exist")
                val emailAtt = inputStream.use {
                    return@use io.jmix.email.EmailAttachment(it.readAllBytes(), "file name", "someId")
                }
            </text>

            <description>
                <![CDATA[
                    Create an email attachment from a classpath resource using <code>Resources</code> and <code>EmailAttachment</code>.<br>
                    <a href="https://docs.jmix.io/jmix/email/api.html#email-attachments">Jmix Documentation</a>
                ]]>
            </description>
        </codeSnippet>

    </category>

</jmixCodeSnippets>