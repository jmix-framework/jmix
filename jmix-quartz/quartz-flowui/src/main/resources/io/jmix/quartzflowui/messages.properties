#
# Copyright 2022 Haulmont.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
menu-config.quartz=Quartz

io.jmix.quartzflowui.view.jobs/filter=Filter
io.jmix.quartzflowui.view.jobs/apply=Apply
io.jmix.quartzflowui.view.jobs/triggerJob=Execute now
io.jmix.quartzflowui.view.jobs/resumeJob=Resume
io.jmix.quartzflowui.view.jobs/column.lastFireDate.header=Last fire date
io.jmix.quartzflowui.view.jobs/column.nextFireDate.header=Next fire date
io.jmix.quartzflowui.view.jobs/column.startDate.header=Start date
io.jmix.quartzflowui.view.jobs/column.endDate.header=End date
io.jmix.quartzflowui.view.jobs/pauseJob=Pause
io.jmix.quartzflowui.view.jobs/triggersTabCaption=Triggers
io.jmix.quartzflowui.view.jobs/jobDataParamsTabCaption=Job data parameters
io.jmix.quartzflowui.view.jobs/dateTimeWithSeconds=dd/MM/yyyy HH:mm:ss
io.jmix.quartzflowui.view.jobs/jobModelListView.title=Quartz jobs
io.jmix.quartzflowui.view.jobs/jobModelListView.menu=Quartz jobs
io.jmix.quartzflowui.view.jobs/jobModelDetailView.title=Job editor
io.jmix.quartzflowui.view.jobs/jobExecuted=Job %s triggered for execution
io.jmix.quartzflowui.view.jobs/jobPaused=Job %s paused
io.jmix.quartzflowui.view.jobs/jobResumed=Job %s resumed
io.jmix.quartzflowui.view.jobs/jobDeleted=Job %s deleted
io.jmix.quartzflowui.view.jobs/nameContains=Name contains
io.jmix.quartzflowui.view.jobs/classContains=Class contains
io.jmix.quartzflowui.view.jobs/addNewDataParamCaption=Add job data parameter
io.jmix.quartzflowui.view.jobs/groupContains=Group contains
io.jmix.quartzflowui.view.jobs/jobState=Job state
io.jmix.quartzflowui.view.jobs/jobAlreadyExistsValidationMessage=Unable to store Job with name: %s and group: %s, because one already exists with this identification.
io.jmix.quartzflowui.view.jobs/triggerAlreadyExistsValidationMessage=Unable to store Trigger with name: %s and group: %s, because one already exists with this identification.
io.jmix.quartzflowui.view.jobs/jobDataParamKeyAlreadyExistsValidationMessage=Job data param keys should be unique.
io.jmix.quartzflowui.view.jobs/jobDataParamKeyIsRequired=Key is required
io.jmix.quartzflowui.view.trigger/triggerModelDetailView.title=Trigger editor
io.jmix.quartzflowui.view.trigger/invalidCronExpressionValidationMessage=Cron expression is invalid.
io.jmix.quartzflowui.view.trigger/triggerStartDateInThePastValidationMessage=Start date can't point to the moment in the past. Set the moment in the future or leave it empty to start trigger immediately.
io.jmix.quartzflowui.view.trigger/cronExpressionHelpText=<div> Cron expression is a sequence of six or seven fields, separated by spaces: second, minute, hour, day, month, day of a week and year(optionally). \
                    The month and the day of a week can be represented by the first three letters of their English names. Examples:\
                    <ul>\
                        <li>0 0/5 * ? * * - fires every 5 minutes</li>\
                        <li>0 0 0 ? * * - fires at 00:00 AM every day</li>\
                        <li>0 0 8-10 ? * * * - fires at 8, 9 and 10 o'clock every day</li>\
                        <li>0 0/30 8-10 ? * * * - fires every day at 8:00, 8:30, 9:00, 9:30 and 10 o'clock</li>\
                        <li>0 10,44 14 ? 3 WED - fires at 2:10 PM and at 2:44 PM every Wednesday in the month of March</li>\
                        <li>0 15 10 ? * 6#3 - fires at 10:15 AM on the third Friday of every month</li>\
                        <li>0 11 11 11 11 ? - fires every November 11th at 11:11 AM</li>\
                        <li>0 0 0 25 12 ? - fires every Christmas at midnight</li>\
                    </ul>\
                </div>
io.jmix.quartzflowui.view.trigger/triggerRepeatMode=Repeat mode
io.jmix.quartzflowui.view.trigger/triggerRepeatModeHelpText=<div>Repeat mode defines how many times trigger can be fired:\
                <ul>\
                    <li>Execute once - trigger will be fired once, without repeating</li>\
                    <li>Finite repeats - trigger will be fired 'Repeat count' + 1 (initial) times every 'Repeat interval' ms</li>\
                    <li>Execute forever - trigger will be fired forever every 'Repeat interval' ms</li>\
                </ul>\
                'Finite Repeats' and 'Execute forever' modes are limited by the End Date (if exists).\
            </div>
io.jmix.quartzflowui.view.trigger/triggerMisfireInstructionHelpText=<div>Misfire Instruction defines behavior if a trigger misfire is detected. There are two types of schedules: Simple Schedule and Cron Schedule.\
            <p>Simple schedule:\
            <ul>\
                 <li><b>Smart policy</b> - depends on the 'repeat count':\
                     <ul>\
                         <li>Without repeats it acts like <b>'Fire now'</b></li>\
                         <li>With limited repeats it acts like <b>'Reschedule now with existing repeat count'</b></li>\
                         <li>With infinite repeats it acts like <b>'Reschedule next with remaining repeat count'</b></li>\
                     </ul>\
                 </li>\
                 <li><b>Ignore misfires</b> - all misfired executions are immediately executed one-by-one. Then the trigger goes back to the schedule</li>\
                 <li><b>Fire now</b> - immediately executes the first misfired execution. Note: this instruction should only be used with a 'one-time' trigger (without repeats). Otherwise it acts like <b>'Reschedule now with remaining repeat count'</b></li>\
                 <li><b>Reschedule next with existing repeat count</b> - the scheduler doesn't do anything immediately and goes back to the schedule. All misfired execution will be executed later according to the schedule (misfires are 'shifted' to the future)</li>\
                 <li><b>Reschedule next with remaining repeat count</b> - the scheduler discards misfired executions and goes back to the schedule. Misfired executions are lost (the total number of executions will be less than configured if they are limited)</li>\
                 <li><b>Reschedule now with existing repeat count</b> - the scheduler immediately executes the first misfired execution. The rest of the misfired executions will be executed later according to the schedule (misfires are 'shifted' to the future)</li>\
                 <li><b>Reschedule now with remaining repeat count</b> - the scheduler immediately executes the first misfired execution and goes back to the schedule. The remaining misfired executions are discarded.</li>\
            </ul>\
            <p>Cron schedule:\
            <ul>\
                 <li><b>Smart policy</b> - currently acts like <b>'Fire and proceed'</b></li>\
                 <li><b>Ignore misfires</b> - all misfired executions are immediately executed one-by-one. Then the trigger goes back to the schedule</li>\
                 <li><b>Fire and proceed</b> - the scheduler immediately executes the first misfired execution and discards the others. Then it goes back to the schedule</li>\
                 <li><b>Do nothing</b> - all misfired executions are discarded, and the trigger simply goes back to the schedule</li>\
            </ul>\
        </div>
io.jmix.quartzflowui.view.trigger/repeatCountHelpText=<div>Defines amount of additional executions besides the first one \
                (total amount of executions will be 'Repeat count' + 1).</div>
