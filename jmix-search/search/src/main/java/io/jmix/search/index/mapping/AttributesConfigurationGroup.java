/*
 * Copyright 2025 Haulmont.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.jmix.search.index.mapping;

import io.jmix.search.index.mapping.fieldmapper.FieldMapper;
import io.jmix.search.index.mapping.propertyvalue.PropertyValueExtractor;
import io.jmix.search.index.mapping.strategy.FieldMappingStrategy;
import org.springframework.lang.Nullable;

import java.util.Map;

public interface AttributesConfigurationGroup {

    /**
     * Provides {@link FieldMappingStrategy} implementation class that should be used to map properties.
     * <p>
     * Can be null if strategy is defined as instance (see {@link #getFieldMappingStrategy()})
     * or configuration is specified explicitly (see {@link #getFieldConfiguration()})
     *
     * @return {@link FieldMappingStrategy} implementation class
     */
    @Nullable
    Class<? extends FieldMappingStrategy> getFieldMappingStrategyClass();

    /**
     * Provides {@link FieldMappingStrategy} instance that should be used to map properties.
     * <p>
     * Can be null if strategy is defined as class (see {@link #getFieldMappingStrategyClass()})
     * or configuration is specified explicitly (see {@link #getFieldConfiguration()})
     * <p>
     * {@link DynamicAttributesConfigurationGroup#getFieldMappingStrategyClass()} is ignored if this instance is set.
     *
     * @return {@link FieldMappingStrategy} instance
     */
    @Nullable
     FieldMappingStrategy getFieldMappingStrategy();

    /**
     * Provides explicit configuration for indexed fields.
     * <p>
     * Can be null if strategy is defined as class (see {@link #getFieldMappingStrategyClass()})
     * or instance (see {@link #getFieldMappingStrategy()}).
     * <p>
     * If strategy (as class or instance) and explicit configuration are both set
     * then explicit configuration will override matching parameters of configuration generated by strategy.
     *
     * @return field configuration
     */
    @Nullable
    FieldConfiguration getFieldConfiguration();

    /**
     * Provides explicit property value extractor.
     * <p>
     * Can be null if strategy is defined as class (see {@link #getFieldMappingStrategyClass()})
     * or instance (see {@link #getFieldMappingStrategy()}).
     * <p>
     * Property value extractor got from strategy will be ignored if explicit one is set.
     *
     * @return property value extractor
     */
    @Nullable
    PropertyValueExtractor getPropertyValueExtractor();

    /**
     * Provides additional parameters related to this element.
     * <p>
     * Parameters are used by {@link FieldMapper} during mapping generation within {@link FieldMappingStrategy}
     * (e.g. analyzer) or by {@link PropertyValueExtractor} at runtime (e.g. enable\disable indexing file content).
     *
     * @return Map with parameters
     */
    Map<String, Object> getParameters();

    /**
     * Provides explicit order.
     * <p>
     * See {@link FieldMappingStrategy#getOrder()}
     *
     * @return order
     */
    @Nullable
    Integer getOrder();

}
