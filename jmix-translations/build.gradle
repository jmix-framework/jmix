/*
 * Copyright 2020 Haulmont.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'base'
    id 'maven-publish'
}

group = 'io.jmix.translations'

task contentJarRu(type: Jar) {
    archiveBaseName = 'jmix-translations-ru'
    includeEmptyDirs = false
    from("content") {
        include("**/messages_ru.properties")
    }
}

task contentJarFr(type: Jar) {
    archiveBaseName = 'jmix-translations-fr'
    includeEmptyDirs = false
    from("content") {
        include("**/messages_fr.properties")
    }
}

task contentJarDe(type: Jar) {
    archiveBaseName = 'jmix-translations-de'
    includeEmptyDirs = false
    from("content") {
        include("**/messages_de.properties")
    }
}

task contentJarNl(type: Jar) {
    archiveBaseName = 'jmix-translations-nl'
    includeEmptyDirs = false
    from("content") {
        include("**/messages_nl.properties")
    }
}

task contentJarZhCn(type: Jar) {
    archiveBaseName = 'jmix-translations-zh-cn'
    includeEmptyDirs = false
    from("content") {
        include("**/messages_zh_CN.properties")
    }
}

task contentJarRo(type: Jar) {
    archiveBaseName = 'jmix-translations-ro'
    includeEmptyDirs = false
    from("content") {
        include("**/messages_ro.properties")
    }
}

task contentJarEl(type: Jar) {
    archiveBaseName = 'jmix-translations-el'
    includeEmptyDirs = false
    from("content") {
        include("**/messages_el.properties")
    }
}

task contentJarCkb(type: Jar) {
    archiveBaseName = 'jmix-translations-ckb'
    includeEmptyDirs = false
    from("content") {
        include("**/messages_ckb.properties")
    }
}

task contentJarIt(type: Jar) {
    archiveBaseName = 'jmix-translations-it'
    includeEmptyDirs = false
    from("content") {
        include("**/messages_it.properties")
    }
}

task contentJarAr(type: Jar) {
    archiveBaseName = 'jmix-translations-ar'
    includeEmptyDirs = false
    from("content") {
        include("**/messages_ar.properties")
    }
}

task contentJarTr(type: Jar) {
    archiveBaseName = 'jmix-translations-tr'
    includeEmptyDirs = false
    from("content") {
        include("**/messages_tr.properties")
    }
}

task contentJarEs(type: Jar) {
    archiveBaseName = 'jmix-translations-es'
    includeEmptyDirs = false
    from("content") {
        include("**/messages_es.properties")
    }
}

assemble.dependsOn(contentJarRu, contentJarFr, contentJarDe, contentJarNl, contentJarZhCn, contentJarRo, contentJarEl, contentJarCkb,
        contentJarIt, contentJarAr, contentJarTr, contentJarEs)

publishing {
    publications {
        Ru(MavenPublication) {
            artifactId = 'jmix-translations-ru'
            artifact(contentJarRu)
        }
        Fr(MavenPublication) {
            artifactId = 'jmix-translations-fr'
            artifact(contentJarFr)
        }
        De(MavenPublication) {
            artifactId = 'jmix-translations-de'
            artifact(contentJarDe)
        }
        Nl(MavenPublication) {
            artifactId = 'jmix-translations-nl'
            artifact(contentJarNl)
        }
        ZhCn(MavenPublication) {
            artifactId = 'jmix-translations-zh-cn'
            artifact(contentJarZhCn)
        }
        Ro(MavenPublication) {
            artifactId = 'jmix-translations-ro'
            artifact(contentJarRo)
        }
        El(MavenPublication) {
            artifactId = 'jmix-translations-el'
            artifact(contentJarEl)
        }
        Ckb(MavenPublication) {
            artifactId = 'jmix-translations-ckb'
            artifact(contentJarCkb)
        }
        It(MavenPublication) {
            artifactId = 'jmix-translations-it'
            artifact(contentJarIt)
        }
        Ar(MavenPublication) {
            artifactId = 'jmix-translations-ar'
            artifact(contentJarAr)
        }
        Tr(MavenPublication) {
            artifactId = 'jmix-translations-tr'
            artifact(contentJarTr)
        }
        Es(MavenPublication) {
            artifactId = 'jmix-translations-es'
            artifact(contentJarEs)
        }
    }
    if (rootProject.hasProperty('jmixUploadUrl')) {
        repositories {
            maven {
                url = rootProject['jmixUploadUrl']
                credentials {
                    username rootProject['jmixUploadUser']
                    password rootProject['jmixUploadPassword']
                }
                allowInsecureProtocol = true
            }
        }
    }
}
