io.jmix.quartzflowui.view.jobs/addNewDataParamCaption = Ajouter un paramètre à la tâche
io.jmix.quartzflowui.view.jobs/apply = Appliquer
io.jmix.quartzflowui.view.jobs/classContains = La classe contient
io.jmix.quartzflowui.view.jobs/column.endDate.header = Date de fin
io.jmix.quartzflowui.view.jobs/column.jobScheduleDescription.header = Description de la planification
io.jmix.quartzflowui.view.jobs/column.lastFireDate.header = Date du dernier déclenchement
io.jmix.quartzflowui.view.jobs/column.nextFireDate.header = Date du prochain déclenchement
io.jmix.quartzflowui.view.jobs/column.startDate.header = Date de début
io.jmix.quartzflowui.view.jobs/column.triggerScheduleDescription.header = Description du déclencheur
io.jmix.quartzflowui.view.jobs/dateTimeWithSeconds = dd/MM/yyyy HH:mm:ss
io.jmix.quartzflowui.view.jobs/filter = Filtre
io.jmix.quartzflowui.view.jobs/groupContains = Le groupe contient
io.jmix.quartzflowui.view.jobs/jobAlreadyExistsValidationMessage = Impossible de stocker la tâche avec le nom : %s et le groupe : %s, car il en existe déjà une avec cette identification.
io.jmix.quartzflowui.view.jobs/jobDataParamKeyAlreadyExistsValidationMessage = Les clés de paramètres de tâche doivent être uniques.
io.jmix.quartzflowui.view.jobs/jobDataParamKeyIsRequired = La clé est requise
io.jmix.quartzflowui.view.jobs/jobDataParamsTabCaption = Paramètres des tâches
io.jmix.quartzflowui.view.jobs/jobDeleted = Tâche %s supprimé
io.jmix.quartzflowui.view.jobs/jobExecuted = Tâche %s déclenchée pour exécution
io.jmix.quartzflowui.view.jobs/jobModelDetailView.title = Éditeur de tâches
io.jmix.quartzflowui.view.jobs/jobModelListView.menu = Tâches quartz
io.jmix.quartzflowui.view.jobs/jobModelListView.title = Tâches quartz
io.jmix.quartzflowui.view.jobs/jobPaused = Tâche %s en pause
io.jmix.quartzflowui.view.jobs/jobResumed = Le tâche %s a repris
io.jmix.quartzflowui.view.jobs/jobState = État de la tâche
io.jmix.quartzflowui.view.jobs/nameContains = Le nom contient
io.jmix.quartzflowui.view.jobs/pauseJob = Pause
io.jmix.quartzflowui.view.jobs/resumeJob = Reprendre
io.jmix.quartzflowui.view.jobs/triggerAlreadyExistsValidationMessage = Impossible de stocker le déclencheur avec le nom : %s et le groupe : %s, car il en existe déjà un avec cette identification.
io.jmix.quartzflowui.view.jobs/triggerJob = Exécuter maintenant
io.jmix.quartzflowui.view.jobs/triggersTabCaption = Déclencheurs
io.jmix.quartzflowui.view.template/notification.template.validation.header = Alerte
io.jmix.quartzflowui.view.trigger/cronExpressionHelpText = <div> L'expression Cron est une séquence de six ou sept champs, séparés par des espaces : seconde, minute, heure, jour, mois, jour de la semaine et année (facultatif). Le mois et le jour d'une semaine peuvent être représentés par les trois premières lettres de leur nom anglais. Exemples:<ul><li>0 0/5 * ? * * - se déclenche toutes les 5 minutes</li><li>0 0 0 ? * * - se déclenche à minuit chaque jour</li><li>0 0 8-10 ? * * * - se déclenche à 8h, 9h et 10h chaque jour</li><li>0 0/30 8-10 ? * * * - se déclenche à 8h00, 8h30, 9h00, 9h30 et 10h</li><li>0 10,44 14 ? 3 WED - se déclenche à 14h10 et 14:44 chaque mercredi du mois de mars</li><li>0 15 10 ? * 6#3 - se déclenche à 10h15 AM le troisième vendredi de chaque mois</li><li>0 11 11 11 11 ? - se déclenche tous les 11 novembre à 11h11</li><li>0 0 0 25 12 ? - se déclenche chaque année à Noël à minuit</li></ul></div>
io.jmix.quartzflowui.view.trigger/invalidCronExpressionValidationMessage = L'expression Cron n'est pas valide.
io.jmix.quartzflowui.view.trigger/repeatCountHelpText = <div>Définit le nombre d'exécutions supplémentaires en plus de la première (le nombre total d'exécutions sera « Nombre de répétitions » + 1).</div>
io.jmix.quartzflowui.view.trigger/triggerMisfireInstructionHelpText = <div>L'instruction d'enclenchement manqué définit le comportement si un raté de déclenchement est détecté. Il existe deux types de planifications : la planification simple et la planification Cron.<p>Planification simple :<ul><li><b>Politique intelligente</b> - dépend du « nombre de répétitions » :<ul><li>Sans répétitions, elle agit comme <b>« Déclencher maintenant »</b></li><li>Avec des répétitions limitées, elle agit comme <b>« Reprogrammer maintenant avec le nombre de répétitions existant »</b></li><li>Avec des répétitions infinies, elle agit comme <b>« Reprogrammer la prochaine exécution avec le nombre de répétitions restant »</b></li></ul></li><li><b>Ignorer les ratés</b> - toutes les exécutions ratées sont immédiatement exécutées une par une. Ensuite, le déclencheur revient à la planification</li><li><b>Déclencher maintenant</b> - exécute immédiatement la première exécution ratée. Remarque : cette instruction ne doit être utilisée qu'avec un déclencheur « unique » (sans répétitions). Sinon, elle agit comme <b>« Replanifier maintenant avec le nombre de répétitions restant »</b></li><li><b>Replanifier la prochaine avec le nombre de répétitions existant</b>  : le planificateur ne fait rien immédiatement et revient à la planification. Toutes les exécutions ratées seront exécutées ultérieurement conformément à la planification (les ratés sont « décalés » vers le futur)</li><li><b>Replanifier la prochaine avec le nombre de répétitions restant</b>  : le planificateur ignore les exécutions ratées et revient à la planification. Les exécutions ratées sont perdues (le nombre total d'exécutions sera inférieur à celui configuré si elles sont limitées)</li><li><b>Replanifier maintenant avec le nombre de répétitions existant</b>  : le planificateur exécute immédiatement la première exécution ratée. Le reste des exécutions ratées sera exécuté plus tard selon le planning (les ratés sont « décalés » vers le futur)</li><li><b>Replanifier maintenant avec le nombre de répétitions restant</b> - le planificateur exécute immédiatement la première exécution ratée et revient au planning. Les exécutions ratées restantes sont rejetées.</li></ul><p>Planification Cron :<ul><li><b>Politique intelligente</b> - agit actuellement comme <b>« Déclencher et continuer »</b></li><li><b>Ignorer les ratés</b> - toutes les exécutions ratées sont immédiatement exécutées une par une. Ensuite, le déclencheur revient au planning</li><li><b>Déclencher et continuer</b> - le planificateur exécute immédiatement la première exécution ratée et rejette les autres. Ensuite, il revient au planning</li><li><b>Ne rien faire</b> - toutes les exécutions ratées sont rejetées et le déclencheur revient simplement au planning</li></ul></div>
io.jmix.quartzflowui.view.trigger/triggerModelDetailView.title = Éditeur de déclencheurs
io.jmix.quartzflowui.view.trigger/triggerModelEdit.caption = Éditeur de déclencheur
io.jmix.quartzflowui.view.trigger/triggerRepeatMode = Mode de répétition
io.jmix.quartzflowui.view.trigger/triggerRepeatModeHelpText = <div>Le mode de répétition définit le nombre de fois que le déclencheur peut être déclenché :<ul><li>Exécuter une fois : le déclencheur sera déclenché une fois, sans répétition.</li><li>Répétitions finies : le déclencheur sera déclenché « Nombre de répétitions » + 1 fois (initiale) toutes les « Intervalle de répétition » ms.</li><li>Exécuter indéfiniment : le déclencheur sera déclenché indéfiniment toutes les « Intervalle de répétition » ms.</li></ul>Les modes « Répétitions finies » et « Exécuter indéfiniment » sont limités par la date de fin (si elle existe).</div>
io.jmix.quartzflowui.view.trigger/triggerStartDateInThePastValidationMessage = La date de début ne peut pas pointer vers un moment dans le passé. Définissez le moment dans le futur ou laissez-le vide pour démarrer le déclencheur immédiatement.
menu-config.quartz = Quartz
